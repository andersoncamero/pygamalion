// scripts/check-image-sizes.ts
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface ImageInfo {
  filename: string;
  size: number;
  sizeKB: number;
  sizeMB: number;
  extension: string;
  needsOptimization: boolean;
}

class ImageSizeChecker {
  private readonly inputDir: string;
  private readonly maxRecommendedSizeKB = 100; 

  constructor() {
    this.inputDir = path.join(__dirname, '../public');
  }

  async getImageFiles(): Promise<string[]> {
    try {
      const files = await fs.readdir(this.inputDir);
      return files.filter(file => 
        /\.(jpg|jpeg|png|gif|bmp|tiff|webp|avif)$/i.test(file)
      );
    } catch (error) {
      console.error(`‚ùå Error leyendo directorio ${this.inputDir}:`, error);
      return [];
    }
  }

  async analyzeImage(filename: string): Promise<ImageInfo> {
    const filePath = path.join(this.inputDir, filename);
    const stats = await fs.stat(filePath);
    const extension = path.extname(filename).toLowerCase();
    const sizeKB = stats.size / 1024;
    const sizeMB = sizeKB / 1024;

    return {
      filename,
      size: stats.size,
      sizeKB,
      sizeMB,
      extension,
      needsOptimization: sizeKB > this.maxRecommendedSizeKB
    };
  }

  formatSize(bytes: number): string {
    if (bytes < 1024) return `${bytes.toFixed(0)}B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)}KB`;
    return `${(bytes / (1024 * 1024)).toFixed(2)}MB`;
  }

  getRecommendation(imageInfo: ImageInfo): string {
    const { sizeKB, extension } = imageInfo;
    
    if (sizeKB > 500) {
      return 'üî¥ CR√çTICO: Reduce inmediatamente';
    } else if (sizeKB > 200) {
      return 'üü† ALTO: Optimizaci√≥n recomendada';
    } else if (sizeKB > 100) {
      return 'üü° MEDIO: Considera optimizar';
    } else if (extension === '.png' && sizeKB > 50) {
      return 'üîµ INFO: Convertir a WebP mejorar√≠a rendimiento';
    } else {
      return '‚úÖ √ìPTIMO: Tama√±o adecuado';
    }
  }

  printReport(images: ImageInfo[]): void {
    console.log('üìä AN√ÅLISIS DE TAMA√ëOS DE IM√ÅGENES');
    console.log('='.repeat(70));

    const sortedImages = [...images].sort((a, b) => b.size - a.size);
    
    console.log('\nüìã DETALLE POR IMAGEN:');
    console.log('-'.repeat(70));
    
    sortedImages.forEach((img, index) => {
      const sizeFormatted = this.formatSize(img.size);
      const recommendation = this.getRecommendation(img);
      
      console.log(`${index + 1}. ${img.filename}`);
      console.log(`   üìè Tama√±o: ${sizeFormatted}`);
      console.log(`   üìÅ Tipo: ${img.extension}`);
      console.log(`   üí° Estado: ${recommendation}`);
      console.log('');
    });

    const totalSize = images.reduce((sum, img) => sum + img.size, 0);
    const largeImages = images.filter(img => img.sizeKB > 200);
    const optimizableImages = images.filter(img => img.needsOptimization);
    const pngImages = images.filter(img => img.extension === '.png');

    console.log('üìà ESTAD√çSTICAS GENERALES:');
    console.log('-'.repeat(70));
    console.log(`üì¶ Total de im√°genes: ${images.length}`);
    console.log(`üíæ Tama√±o total: ${this.formatSize(totalSize)}`);
    console.log(`üìè Tama√±o promedio: ${this.formatSize(totalSize / images.length)}`);
    console.log(`üî¥ Im√°genes grandes (>200KB): ${largeImages.length}`);
    console.log(`‚ö†Ô∏è  Requieren optimizaci√≥n: ${optimizableImages.length}`);
    console.log(`üñºÔ∏è  Archivos PNG: ${pngImages.length}`);

    if (optimizableImages.length > 0) {
      const potentialSavings = optimizableImages.reduce((sum, img) => 
        sum + (img.size * 0.7), 0);
      
      console.log(`üí∞ Ahorro potencial: ~${this.formatSize(potentialSavings)} (estimado)`);
    }

    console.log('\nüéØ RECOMENDACIONES:');
    console.log('-'.repeat(70));
    
    if (optimizableImages.length > 0) {
      console.log('1. üöÄ Ejecutar optimizaci√≥n:');
      console.log('   pnpm optimize-images');
      console.log('');
    }
    
    if (pngImages.length > 0) {
      console.log('2. üîÑ Convertir PNG a WebP para mejor compresi√≥n');
      console.log('');
    }
    
    if (largeImages.length > 0) {
      console.log('3. üìê Redimensionar im√°genes grandes antes de optimizar');
      console.log('');
    }
    
    console.log('4. üîß Implementar lazy loading para im√°genes no cr√≠ticas');
    console.log('5. üì± Considerar diferentes tama√±os para diferentes dispositivos');
  }

  printPriorityActions(images: ImageInfo[]): void {
    const criticalImages = images.filter(img => img.sizeKB > 500);
    const highPriorityImages = images.filter(img => img.sizeKB > 200 && img.sizeKB <= 500);
    
    if (criticalImages.length > 0 || highPriorityImages.length > 0) {
      console.log('\nüö® ACCIONES PRIORITARIAS:');
      console.log('='.repeat(70));
      
      if (criticalImages.length > 0) {
        console.log('\nüî¥ CR√çTICO - Optimizar INMEDIATAMENTE:');
        criticalImages.forEach(img => {
          console.log(`   ‚Ä¢ ${img.filename} (${this.formatSize(img.size)})`);
        });
      }
      
      if (highPriorityImages.length > 0) {
        console.log('\nüü† ALTA PRIORIDAD - Optimizar pronto:');
        highPriorityImages.forEach(img => {
          console.log(`   ‚Ä¢ ${img.filename} (${this.formatSize(img.size)})`);
        });
      }
      
      console.log('\nüí° Comando para optimizar:');
      console.log('   pnpm optimize-images');
    }
  }
}

async function main(): Promise<void> {
  console.log('üîç Verificando tama√±os de im√°genes en Pygmalion...\n');
  
  const checker = new ImageSizeChecker();
  
  try {
    const imageFiles = await checker.getImageFiles();
    
    if (imageFiles.length === 0) {
      console.log('‚ö†Ô∏è  No se encontraron im√°genes en public/imgs/');
      return;
    }
    
    console.log(`üìÅ Analizando ${imageFiles.length} im√°genes...\n`);
    
    const imageInfos: ImageInfo[] = [];
    
    for (const file of imageFiles) {
      const info = await checker.analyzeImage(file);
      imageInfos.push(info);
    }
    
    checker.printReport(imageInfos);
    checker.printPriorityActions(imageInfos);
    
    console.log('\n‚úÖ An√°lisis completado');
    
  } catch (error) {
    console.error('‚ùå Error durante el an√°lisis:', error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { ImageSizeChecker };